import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Stream;

/**
 * 1.创建stream
 *
 * 2.中间操作
 * 		筛选与切片
 * 		filter -- 接收Lambda，从流中排除某些元素。
 * 		limit -- 截断流，使其元素不超过给定数量。
 * 		skip(n) -- 跳过元素，返回一个扔掉前n个元素的流。若流中元素不足n个，则返回一个空流。与limit(n)互补。
 * 		distinct -- 筛选。通过流所生成元素的hashCode()和equals()去重
 *
 *
 * 3.终止操作（终端操作）
 *
 **/
public class TestStreamApi {

	List<Employee> list = new ArrayList<>(Arrays.asList(
			new Employee("张三", 21),
			new Employee("李四", 22),
			new Employee("王五", 23),
			new Employee("阿六", 24),
			new Employee("阿六", 24),
			new Employee("阿六", 24),
			new Employee("阿六", 24),
			new Employee("狗蛋", 25)
	));

	//内部迭代：迭代操作由 Stream API完成
	@Test
	public void Test1() {
		//返回的是流
		//中间操作：不会执行任何操作，只是定义逻辑。
		Stream<Employee> stream = list.stream()
										.filter(x -> {

											System.out.println("中间操作");
											return x.getAge() > 23;
										});

		//终止操作：一次性执行全部内容，即“惰性求值”
		stream.forEach(System.out::println);
	}

	//外部迭代：
	@Test
	public void test2() {
		Iterator<Employee> it = list.iterator();
		while(it.hasNext()) {
			System.out.println(it.next());
		}
	}

	//筛选和切片
	@Test
	public void test3() {
		list.stream()
				.filter(x -> {
					//找到结果后，后续就不再执行。和 && || 类似 （单个& | 是全部条件都执行）
					System.out.println("短路");
					return x.getAge() > 21;
				})
				.limit(1)
				.forEach(System.out::println);

		System.out.println("----------------------------------------");

		list.stream()
				.filter(x -> x.getAge() > 21)
				//.skip(2)
				.distinct()
				.forEach(System.out::println);
	}
}
